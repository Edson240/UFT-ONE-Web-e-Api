/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘CarrosGet.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir5 = null;
        public BindDirection bind_dir6 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.Sequence8 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence8");
            _flow.ConcatenateStringsActivity6 = new HP.ST.Ext.BasicActivities.ConcatenateStringsActivity(_context,"ConcatenateStringsActivity6");
            _flow.HTTPActivity4 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity4");
            _flow.Loop7 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop7Input>(_context,"Loop7",LoopType.For);
            _flow.Sequence9 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence9");
            _flow.SetEnvironmentVariableActivity5 = new HP.ST.Ext.BasicActivities.SetEnvironmentVariableActivity(_context,"SetEnvironmentVariableActivity5");
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"Start";
            _flow.StartActivity1.JVM = new HP.ST.Ext.BasicActivities.JVMProperties();
            _flow.StartActivity1.IsJavaUsed = false;
            _flow.StartActivity1.JVM.Classpath = @"%CLASSPATH%";
            _flow.StartActivity1.JVM.AdditionalVMParameters = @"";
            _flow.StartActivity1.JMS = new HP.ST.Ext.BasicActivities.JMSProperties();
            _flow.StartActivity1.IsJmsUsed = false;
            _flow.StartActivity1.JMS.JNDIContextFactory = @"<Select...>";
            _flow.StartActivity1.JMS.JNDIProviderUrl = @"";
            _flow.StartActivity1.JMS.JMSConnectionFactory = @"";
            _flow.StartActivity1.JMS.SecurityPrincipal = @"";
            _flow.StartActivity1.JMS.SecurityCredentials = @"";
            _flow.StartActivity1.JMS.JMSClientID = @"";
            _flow.StartActivity1.JMS.SSLPassword = @"";
            _flow.StartActivity1.JMS.SSLTrustedCertificate = @"";
            _flow.StartActivity1.JMS.SSLIdentity = @"";
            _flow.StartActivity1.JMS.ConnectionsPerProcess = @"1";
            _flow.StartActivity1.JMS.TimeoutOptions = @"DN_User_defined_Timeout";
            _flow.StartActivity1.JMS.UserTimeout = @"20";
            _flow.StartActivity1.JMS.GenerateAutoSelector = @"No";
            _flow.StartActivity1.KafkaSSL = new HP.ST.Fwk.KafkaFWK.KafkaSSLProperties();
            _flow.StartActivity1.IsKafkaUsed = false;
            _flow.StartActivity1.KafkaSSL.StrEnableSSL = @"No";
            _flow.StartActivity1.KafkaSSL.SSLCALocation = @"";
            _flow.StartActivity1.KafkaSSL.SSLClientCertificateLocation = @"";
            _flow.StartActivity1.KafkaSSL.SSLClientKeyLocation = @"";
            _flow.StartActivity1.KafkaSASL = new HP.ST.Fwk.KafkaFWK.KafkaSASLProperties();
            _flow.StartActivity1.KafkaSASL.StrEnableSASL = @"No";
            _flow.StartActivity1.KafkaSASL.StrMechanism = @"GSSAPI";
            _flow.StartActivity1.KafkaSASL.StrServiceName = @"";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"Test Flow";
            _flow.Loop2.Activities.Add (_flow.Sequence8);
            this.Activities.Add (_flow.Loop2);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"End";
            this.Activities.Add (_flow.EndActivity3);
            _flow.Sequence8.Comment = @"";
            _flow.Sequence8.IconPath = @"";
            _flow.Sequence8.Name = @"Sequence8";
            _flow.Sequence8.Activities.Add (_flow.ConcatenateStringsActivity6);
            _flow.Sequence8.Activities.Add (_flow.HTTPActivity4);
            _flow.Sequence8.Activities.Add (_flow.Loop7);
            _flow.ConcatenateStringsActivity6.Prefix = @"http://localhost:3434/cars-app/carShop/cars";
            _flow.ConcatenateStringsActivity6.Suffix = @"";
            _flow.ConcatenateStringsActivity6.Comment = @"";
            _flow.ConcatenateStringsActivity6.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_concat.png";
            _flow.ConcatenateStringsActivity6.Name = @"Concatenate Strings6";
            _flow.HTTPActivity4.TextBody = @"";
            _flow.HTTPActivity4.TextXmlBody = @"";
            _flow.HTTPActivity4.FileBody = @"";
            _flow.HTTPActivity4.PostBody = @"";
            _flow.HTTPActivity4.Url = @"http://localhost:3434/cars-app/carShop/cars";
            _flow.HTTPActivity4.HttpMethod = @"GET";
            _flow.HTTPActivity4.HttpVersion = @"1.1";
            _flow.HTTPActivity4.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity4.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity4.RequestHeaders[0].Key = @"Content-Type";
            _flow.HTTPActivity4.RequestHeaders[0].Value = @"application/json";
            _flow.HTTPActivity4.Comment = @"";
            _flow.HTTPActivity4.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity4.RequestBodyType = @"Json";
            _flow.HTTPActivity4.ResponseType = @"Json";
            _flow.HTTPActivity4.Name = @"HTTP Request4";
            _flow.HTTPActivity4.Proxy.Server = @"";
            _flow.HTTPActivity4.Proxy.Username = @"";
            _flow.HTTPActivity4.Proxy.Password = @"";
            _flow.HTTPActivity4.Authentication.Username = @"";
            _flow.HTTPActivity4.Authentication.Password = @"";
            _flow.HTTPActivity4.Authentication.PreemptiveAuthentication = false;
            _flow.HTTPActivity4.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity4.Timeout = (int)100000;
            _flow.HTTPActivity4.ClientCertificate.Password = @"";
            _flow.HTTPActivity4.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity4.UseClientCertificate = false;
            _flow.HTTPActivity4.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity4.AllowRedirections = true;
            _flow.HTTPActivity4.ReuseCookies = false;
            _flow.HTTPActivity4.ExpectServerError = false;
            _flow.HTTPActivity4.HanaRequest = false;
            XmlDocument HTTPActivity4_XMLBody_Document = new XmlDocument();
            HTTPActivity4_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity4_XMLBody_Document.LoadXml("<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity4.XMLBody = HTTPActivity4_XMLBody_Document;
            XmlDocument HTTPActivity4_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity4_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity4_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity4.RequestMultipartInfoXml = HTTPActivity4_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity4.Multipart=false;
            XmlDocument HTTPActivity4_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity4_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity4_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity4.ExpectedResponseXmlBody = HTTPActivity4_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity4_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity4_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity4_ExpectedResponseJsonBody_Document.LoadXml(
@"<Array jsonType=""Array"" isAnonymous=""true""><Object jsonType=""Object"" isAnonymous=""true""><class jsonType=""String"">com.ca.lisa.demo.CarInventory</class><id jsonType=""Integer"">1</id><carTrim jsonType=""String"">Premium Plus</carTrim><color jsonType=""String"">Silver</color><dealer jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarDealer</class><id jsonType=""Integer"">2</id><address jsonType=""String"">3800 Motor City Dr</address><city jsonType=""String"">Denver</city><name jsonType=""String"">Mountain Motors Inc</name><state jsonType=""String"">CO</state><telephone jsonType=""String"">303-222-8766</telephone><website jsonType=""String"">www.mmdenver.com</website><zip jsonType=""String"">80202</zip></dealer><engine jsonType=""String"">2.7 V6</engine><image1 jsonType=""String"">inventory1.jpg</image1><image2 jsonType=""String"">cars/interior1.jpg</image2><makeid jsonType=""Integer"">2</makeid><milage jsonType=""Integer"">138560</milage><model jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarModel</class><id jsonType=""Integer"">10</id><fuelType jsonType=""String"">Gas</fuelType><make jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarMake</class><id jsonType=""Integer"">2</id><name jsonType=""String"">Audi</name></make><modelYear jsonType=""Integer"">1996</modelYear><name jsonType=""String"">A4-B</name><subName jsonType=""String"">Base</subName><type jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarType</class><id jsonType=""Integer"">7</id><name jsonType=""String"">Sedan</name></type></model><modelYear jsonType=""Integer"">2011</modelYear><modelid jsonType=""Integer"">10</modelid><options jsonType=""String"">Leather, Navigation, Rear Air</options><owners jsonType=""Integer"">6</owners><price jsonType=""Float"">3995</price><stockNumber jsonType=""String"">NAD8989</stockNumber><transmission jsonType=""String"">Auto</transmission><vin jsonType=""String"">2T1KR32E37C639014</vin></Object><Object jsonType=""Object"" isAnonymous=""true""><class jsonType=""String"">com.ca.lisa.demo.CarInventory</class><id jsonType=""Integer"">2</id><carTrim jsonType=""String"">Technology</carTrim><color jsonType=""String"">Black</color><dealer jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarDealer</class><id jsonType=""Integer"">2</id><address jsonType=""String"">3800 Motor City Dr</address><city jsonType=""String"">Denver</city><name jsonType=""String"">Mountain Motors Inc</name><state jsonType=""String"">CO</state><telephone jsonType=""String"">303-222-8766</telephone><website jsonType=""String"">www.mmdenver.com</website><zip jsonType=""String"">80202</zip></dealer><engine jsonType=""String"">3.2 V6</engine><image1 jsonType=""String"">inventory2.jpg</image1><image2 jsonType=""String"">cars/interior2.jpg</image2><makeid jsonType=""Integer"">1</makeid><milage jsonType=""Integer"">30650</milage><model jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarModel</class><id jsonType=""Integer"">2</id><fuelType jsonType=""String"">Gas</fuelType><make jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarMake</class><id jsonType=""Integer"">1</id><name jsonType=""String"">Acura</name></make><modelYear jsonType=""Integer"">2013</modelYear><name jsonType=""String"">RLX-AWD</name><subName jsonType=""String"">AWD</subName><type jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarType</class><id jsonType=""Integer"">7</id><name jsonType=""String"">Sedan</name></type></model><modelYear jsonType=""Integer"">2013</modelYear><modelid jsonType=""Integer"">2</modelid><options jsonType=""String"">Leather, Navigation, Ski/BikeRack</options><owners jsonType=""Integer"">2</owners><price jsonType=""Float"">30995</price><stockNumber jsonType=""String"">RA2356/1</stockNumber><transmission jsonType=""String"">Auto</transmission><vin jsonType=""String"">1ZVBP8AM1D5256900</vin></Object><Object jsonType=""Object"" isAnonymous=""true""><class jsonType=""String"">com.ca.lisa.demo.CarInventory</class><id jsonType=""Integer"">3</id><carTrim jsonType=""String"">Premium</carTrim><color jsonType=""String"">Black</color><dealer jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarDealer</class><id jsonType=""Integer"">4</id><address jsonType=""String"">1673 Blake Rd</address><city jsonType=""String"">Aurora</city><name jsonType=""String"">Aurora Acura</name><state jsonType=""String"">CO</state><telephone jsonType=""String"">303-955-0134</telephone><website jsonType=""String"">www.aurora_acura.com</website><zip jsonType=""String"">80203</zip></dealer><engine jsonType=""String"">3.5 V6</engine><image1 jsonType=""String"">inventory3.jpg</image1><image2 jsonType=""String"">cars/interior3.jpg</image2><makeid jsonType=""Integer"">1</makeid><milage jsonType=""Integer"">54650</milage><model jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarModel</class><id jsonType=""Integer"">2</id><fuelType jsonType=""String"">Gas</fuelType><make jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarMake</class><id jsonType=""Integer"">1</id><name jsonType=""String"">Acura</name></make><modelYear jsonType=""Integer"">2013</modelYear><name jsonType=""String"">RLX-AWD</name><subName jsonType=""String"">AWD</subName><type jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarType</class><id jsonType=""Integer"">7</id><name jsonType=""String"">Sedan</name></type></model><modelYear jsonType=""Integer"">2012</modelYear><modelid jsonType=""Integer"">2</modelid><options jsonType=""String"">Leather, Navigation, Backup Camera</options><owners jsonType=""Integer"">2</owners><price jsonType=""Float"">30995</price><stockNumber jsonType=""String"">BN12560</stockNumber><transmission jsonType=""String"">Auto</transmission><vin jsonType=""String"">3N1CB51D35l458771</vin></Object><Object jsonType=""Object"" isAnonymous=""true""><class jsonType=""String"">com.ca.lisa.demo.CarInventory</class><id jsonType=""Integer"">4</id><carTrim jsonType=""String"">Sport</carTrim><color jsonType=""String"">Silver</color><dealer jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarDealer</class><id jsonType=""Integer"">4</id><address jsonType=""String"">1673 Blake Rd</address><city jsonType=""String"">Aurora</city><name jsonType=""String"">Aurora Acura</name><state jsonType=""String"">CO</state><telephone jsonType=""String"">303-955-0134</telephone><website jsonType=""String"">www.aurora_acura.com</website><zip jsonType=""String"">80203</zip></dealer><engine jsonType=""String"">3.5 V6</engine><image1 jsonType=""String"">inventory4.jpg</image1><image2 jsonType=""String"">cars/interior4.jpg</image2><makeid jsonType=""Integer"">1</makeid><milage jsonType=""Integer"">78400</milage><model jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarModel</class><id jsonType=""Integer"">2</id><fuelType jsonType=""String"">Gas</fuelType><make jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarMake</class><id jsonType=""Integer"">1</id><name jsonType=""String"">Acura</name></make><modelYear jsonType=""Integer"">2013</modelYear><name jsonType=""String"">RLX-AWD</name><subName jsonType=""String"">AWD</subName><type jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarType</class><id jsonType=""Integer"">7</id><name jsonType=""String"">Sedan</name></type></model><modelYear jsonType=""Integer"">2010</modelYear><modelid jsonType=""Integer"">2</modelid><options jsonType=""String"">Ski Rack, Tow kit</options><owners jsonType=""Integer"">4</owners><price jsonType=""Float"">21405</price><stockNumber jsonType=""String"">BN13456</stockNumber><transmission jsonType=""String"">Auto</transmission><vin jsonType=""String"">2T1KR32E37C639012</vin></Object><Object jsonType=""Object"" isAnonymous=""true""><class jsonType=""String"">com.ca.lisa.demo.CarInventory</class><id jsonType=""Integer"">5</id><carTrim jsonType=""String"">Sport</carTrim><color jsonType=""String"">Red</color><dealer jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarDealer</class><id jsonType=""Integer"">4</id><address jsonType=""String"">1673 Blake Rd</address><city jsonType=""String"">Aurora</city><name jsonType=""String"">Aurora Acura</name><state jsonType=""String"">CO</state><telephone jsonType=""String"">303-955-0134</telephone><website jsonType=""String"">www.aurora_acura.com</website><zip jsonType=""String"">80203</zip></dealer><engine jsonType=""String"">1.8T</engine><image1 jsonType=""String"">inventory5.jpg</image1><image2 jsonType=""String"">cars/interior5.jpg</image2><makeid jsonType=""Integer"">2</makeid><milage jsonType=""Integer"">98145</milage><model jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarModel</class><id jsonType=""Integer"">11</id><fuelType jsonType=""String"">Gas</fuelType><make jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarMake</class><id jsonType=""Integer"">2</id><name jsonType=""String"">Audi</name></make><modelYear jsonType=""Integer"">1996</modelYear><name jsonType=""String"">S4-S</name><subName jsonType=""String"">Sport</subName><type jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarType</class><id jsonType=""Integer"">7</id><name jsonType=""String"">Sedan</name></type></model><modelYear jsonType=""Integer"">2008</modelYear><modelid jsonType=""Integer"">11</modelid><options jsonType=""String"">Leather, Dual Air, 6 Speed</options><owners jsonType=""Integer"">4</owners><price jsonType=""Float"">7800</price><stockNumber jsonType=""String"">BN13467</stockNumber><transmission jsonType=""String"">Manual</transmission><vin jsonType=""String"">3N1CB51D35l458773</vin></Object><Object jsonType=""Object"" isAnonymous=""true""><class jsonType=""String"">com.ca.lisa.demo.CarInventory</class><id jsonType=""Integer"">6</id><carTrim jsonType=""String"">xDrivePlus</carTrim><color jsonType=""String"">Black</color><dealer jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarDealer</class><id jsonType=""Integer"">5</id><address jsonType=""String"">126 Rte 76</address><city jsonType=""String"">Fort Collins</city><name jsonType=""String"">Hilton Honda</name><state jsonType=""String"">CO</state><telephone jsonType=""String"">303-123-6789</telephone><website jsonType=""String"">www.hiltonhonda.com</website><zip jsonType=""String"">80503</zip></dealer><engine jsonType=""String"">3.5L</engine><image1 jsonType=""String"">inventory6.jpg</image1><image2 jsonType=""String"">cars/interior6.jpg</image2><makeid jsonType=""Integer"">3</makeid><milage jsonType=""Integer"">75350</milage><model jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarModel</class><id jsonType=""Integer"">27</id><fuelType jsonType=""String"">Gas</fuelType><make jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarMake</class><id jsonType=""Integer"">3</id><name jsonType=""String"">BMW</name></make><modelYear jsonType=""Integer"">1990</modelYear><name jsonType=""String"">7-Series-P</name><subName jsonType=""String"">Premium</subName><type jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarType</class><id jsonType=""Integer"">7</id><name jsonType=""String"">Sedan</name></type></model><modelYear jsonType=""Integer"">2010</modelYear><modelid jsonType=""Integer"">27</modelid><options jsonType=""String"">Leather, Navigation, Rear Air</options><owners jsonType=""Integer"">1</owners><price jsonType=""Float"">34500</price><stockNumber jsonType=""String"">N2367J6</stockNumber><transmission jsonType=""String"">Auto</transmission><vin jsonType=""String"">3N1CB51D35l458774</vin></Object><Object jsonType=""Object"" isAnonymous=""true""><class jsonType=""String"">com.ca.lisa.demo.CarInventory</class><id jsonType=""Integer"">7</id><carTrim jsonType=""String"">Base</carTrim><color jsonType=""String"">Blue</color><dealer jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarDealer</class><id jsonType=""Integer"">6</id><address jsonType=""String"">570 Lane St</address><city jsonType=""String"">Englewood</city><name jsonType=""String"">Terrys VW</name><state jsonType=""String"">CO</state><telephone jsonType=""String"">303- 560-3412</telephone><website jsonType=""String"">www.terry_vag.com</website><zip jsonType=""String"">80205</zip></dealer><engine jsonType=""String"">2.0T</engine><image1 jsonType=""String"">inventory7.jpg</image1><image2 jsonType=""String"">cars/interior7.jpg</image2><makeid jsonType=""Integer"">2</makeid><milage jsonType=""Integer"">104300</milage><model jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarModel</class><id jsonType=""Integer"">10</id><fuelType jsonType=""String"">Gas</fuelType><make jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarMake</class><id jsonType=""Integer"">2</id><name jsonType=""String"">Audi</name></make><modelYear jsonType=""Integer"">1996</modelYear><name jsonType=""String"">A4-B</name><subName jsonType=""String"">Base</subName><type jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarType</class><id jsonType=""Integer"">7</id><name jsonType=""String"">Sedan</name></type></model><modelYear jsonType=""Integer"">2008</modelYear><modelid jsonType=""Integer"">10</modelid><options jsonType=""String"">Premium Audio Upgrade</options><owners jsonType=""Integer"">1</owners><price jsonType=""Float"">10750</price><stockNumber jsonType=""String"">ASN29001</stockNumber><transmission jsonType=""String"">Auto</transmission><vin jsonType=""String"">2T1KR32E37C639015</vin></Object><Object jsonType=""Object"" isAnonymous=""true""><class jsonType=""String"">com.ca.lisa.demo.CarInventory</class><id jsonType=""Integer"">8</id><carTrim jsonType=""String"">Premium</carTrim><color jsonType=""String"">Silver</color><dealer jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarDealer</class><id jsonType=""Integer"">6</id><address jsonType=""String"">570 Lane St</address><city jsonType=""String"">Englewood</city><name jsonType=""String"">Terrys VW</name><state jsonType=""String"">CO</state><telephone jsonType=""String"">303- 560-3412</telephone><website jsonType=""String"">www.terry_vag.com</website><zip jsonType=""String"">80205</zip></dealer><engine jsonType=""String"">2.0T</engine><image1 jsonType=""String"">inventory8.jpg</image1><image2 jsonType=""String"">cars/interior8.jpg</image2><makeid jsonType=""Integer"">2</makeid><milage jsonType=""Integer"">62000</milage><model jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarModel</class><id jsonType=""Integer"">10</id><fuelType jsonType=""String"">Gas</fuelType><make jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarMake</class><id jsonType=""Integer"">2</id><name jsonType=""String"">Audi</name></make><modelYear jsonType=""Integer"">1996</modelYear><name jsonType=""String"">A4-B</name><subName jsonType=""String"">Base</subName><type jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarType</class><id jsonType=""Integer"">7</id><name jsonType=""String"">Sedan</name></type></model><modelYear jsonType=""Integer"">2012</modelYear><modelid jsonType=""Integer"">10</modelid><options jsonType=""String"">Leather, Navigation, Bluetooth</options><owners jsonType=""Integer"">3</owners><price jsonType=""Float"">20400</price><stockNumber jsonType=""String"">ASN34501</stockNumber><transmission jsonType=""String"">Auto</transmission><vin jsonType=""String"">1ZVBP8AM1D5256906</vin></Object><Object jsonType=""Object"" isAnonymous=""true""><class jsonType=""String"">com.ca.lisa.demo.CarInventory</class><id jsonType=""Integer"">9</id><carTrim jsonType=""String"">Base</carTrim><color jsonType=""String"">Silver</color><dealer jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarDealer</class><id jsonType=""Integer"">6</id><address jsonType=""String"">570 Lane St</address><city jsonType=""String"">Englewood</city><name jsonType=""String"">Terrys VW</name><state jsonType=""String"">CO</state><telephone jsonType=""String"">303- 560-3412</telephone><website jsonType=""String"">www.terry_vag.com</website><zip jsonType=""String"">80205</zip></dealer><engine jsonType=""String"">3.0L</engine><image1 jsonType=""String"">inventory9.jpg</image1><image2 jsonType=""String"">cars/interior9.jpg</image2><makeid jsonType=""Integer"">3</makeid><milage jsonType=""Integer"">58900</milage><model jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarModel</class><id jsonType=""Integer"">27</id><fuelType jsonType=""String"">Gas</fuelType><make jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarMake</class><id jsonType=""Integer"">3</id><name jsonType=""String"">BMW</name></make><modelYear jsonType=""Integer"">1990</modelYear><name jsonType=""String"">7-Series-P</name><subName jsonType=""String"">Premium</subName><type jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarType</class><id jsonType=""Integer"">7</id><name jsonType=""String"">Sedan</name></type></model><modelYear jsonType=""Integer"">2009</modelYear><modelid jsonType=""Integer"">27</modelid><options jsonType=""String"">Leather, Navigation, Rear Air</options><owners jsonType=""Integer"">2</owners><price jsonType=""Float"">32295</price><stockNumber jsonType=""String"">ASN90845</stockNumber><transmission jsonType=""String"">Auto</transmission><vin jsonType=""String"">1ZVBP8AM1D5256907</vin></Object><Object jsonType=""Object"" isAnonymous=""true""><class jsonType=""String"">com.ca.lisa.demo.CarInventory</class><id jsonType=""Integer"">10</id><carTrim jsonType=""String"">Technology Plus</carTrim><color jsonType=""String"">Black</color><dealer jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarDealer</class><id jsonType=""Integer"">5</id><address jsonType=""String"">126 Rte 76</address><city jsonType=""String"">Fort Collins</city><name jsonType=""String"">Hilton Honda</name><state jsonType=""String"">CO</state><telephone jsonType=""String"">303-123-6789</telephone><website jsonType=""String"">www.hiltonhonda.com</website><zip jsonType=""String"">80503</zip></dealer><engine jsonType=""String"">3.5 V6</engine><image1 jsonType=""String"">inventory10.jpg</image1><image2 jsonType=""String"">cars/interior10.jpg</image2><makeid jsonType=""Integer"">1</makeid><milage jsonType=""Integer"">54650</milage><model jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarModel</class><id jsonType=""Integer"">1</id><fuelType jsonType=""String"">Gas</fuelType><make jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarMake</class><id jsonType=""Integer"">1</id><name jsonType=""String"">Acura</name></make><modelYear jsonType=""Integer"">2013</modelYear><name jsonType=""String"">RLX-B</name><subName jsonType=""String"">Base</subName><type jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarType</class><id jsonType=""Integer"">7</id><name jsonType=""String"">Sedan</name></type></model><modelYear jsonType=""Integer"">2012</modelYear><modelid jsonType=""Integer"">1</modelid><options jsonType=""String"">Leather, Navigation, Backup Camera</options><owners jsonType=""Integer"">2</owners><price jsonType=""Float"">30995</price><stockNumber jsonType=""String"">245980A</stockNumber><transmission jsonType=""String"">Auto</transmission><vin jsonType=""String"">3N1CB51D35l458778</vin></Object><Object jsonType=""Object"" isAnonymous=""true""><class jsonType=""String"">com.ca.lisa.demo.CarInventory</class><id jsonType=""Integer"">11</id><carTrim jsonType=""String"">Technology Plus</carTrim><color jsonType=""String"">Green</color><dealer jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarDealer</class><id jsonType=""Integer"">5</id><address jsonType=""String"">126 Rte 76</address><city jsonType=""String"">Fort Collins</city><name jsonType=""String"">Hilton Honda</name><state jsonType=""String"">CO</state><telephone jsonType=""String"">303-123-6789</telephone><website jsonType=""String"">www.hiltonhonda.com</website><zip jsonType=""String"">80503</zip></dealer><engine jsonType=""String"">3.5 V8</engine><image1 jsonType=""String"">inventory11.jpg</image1><image2 jsonType=""String"">cars/interior11.jpg</image2><makeid jsonType=""Integer"">1</makeid><milage jsonType=""Integer"">74850</milage><model jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarModel</class><id jsonType=""Integer"">1</id><fuelType jsonType=""String"">Gas</fuelType><make jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarMake</class><id jsonType=""Integer"">1</id><name jsonType=""String"">Acura</name></make><modelYear jsonType=""Integer"">2013</modelYear><name jsonType=""String"">RLX-B</name><subName jsonType=""String"">Base</subName><type jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarType</class><id jsonType=""Integer"">7</id><name jsonType=""String"">Sedan</name></type></model><modelYear jsonType=""Integer"">2011</modelYear><modelid jsonType=""Integer"">1</modelid><options jsonType=""String"">Leather, Navigation</options><owners jsonType=""Integer"">1</owners><price jsonType=""Float"">20995</price><stockNumber jsonType=""String"">245180A</stockNumber><transmission jsonType=""String"">Auto</transmission><vin jsonType=""String"">3N1CB41D32l458778</vin></Object><Object jsonType=""Object"" isAnonymous=""true""><class jsonType=""String"">com.ca.lisa.demo.CarInventory</class><id jsonType=""Integer"">12</id><carTrim jsonType=""String"">Luxury</carTrim><color jsonType=""String"">Black</color><dealer jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarDealer</class><id jsonType=""Integer"">5</id><address jsonType=""String"">126 Rte 76</address><city jsonType=""String"">Fort Collins</city><name jsonType=""String"">Hilton Honda</name><state jsonType=""String"">CO</state><telephone jsonType=""String"">303-123-6789</telephone><website jsonType=""String"">www.hiltonhonda.com</website><zip jsonType=""String"">80503</zip></dealer><engine jsonType=""String"">3.0 V6</engine><image1 jsonType=""String"">inventory22.jpg</image1><image2 jsonType=""String"">cars/interior21.jpg</image2><makeid jsonType=""Integer"">2</makeid><milage jsonType=""Integer"">24650</milage><model jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarModel</class><id jsonType=""Integer"">12</id><fuelType jsonType=""String"">Gas</fuelType><make jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarMake</class><id jsonType=""Integer"">2</id><name jsonType=""String"">Audi</name></make><modelYear jsonType=""Integer"">1996</modelYear><name jsonType=""String"">A4-C</name><subName jsonType=""String"">Convertible</subName><type jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarType</class><id jsonType=""Integer"">1</id><name jsonType=""String"">Convertible</name></type></model><modelYear jsonType=""Integer"">2012</modelYear><modelid jsonType=""Integer"">12</modelid><options jsonType=""String"">Leather</options><owners jsonType=""Integer"">2</owners><price jsonType=""Float"">11995</price><stockNumber jsonType=""String"">246987A</stockNumber><transmission jsonType=""String"">Auto</transmission><vin jsonType=""String"">3H1CB51D35l453773</vin></Object><Object jsonType=""Object"" isAnonymous=""true""><class jsonType=""String"">com.ca.lisa.demo.CarInventory</class><id jsonType=""Integer"">13</id><carTrim jsonType=""String"">Base</carTrim><color jsonType=""String"">Black</color><dealer jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarDealer</class><id jsonType=""Integer"">6</id><address jsonType=""String"">570 Lane St</address><city jsonType=""String"">Englewood</city><name jsonType=""String"">Terrys VW</name><state jsonType=""String"">CO</state><telephone jsonType=""String"">303- 560-3412</telephone><website jsonType=""String"">www.terry_vag.com</website><zip jsonType=""String"">80205</zip></dealer><engine jsonType=""String"">3.0L</engine><image1 jsonType=""String"">inventory23.jpg</image1><image2 jsonType=""String"">cars/interior23.jpg</image2><makeid jsonType=""Integer"">3</makeid><milage jsonType=""Integer"">58900</milage><model jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarModel</class><id jsonType=""Integer"">23</id><fuelType jsonType=""String"">Gas</fuelType><make jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarMake</class><id jsonType=""Integer"">3</id><name jsonType=""String"">BMW</name></make><modelYear jsonType=""Integer"">1990</modelYear><name jsonType=""String"">3-Series-S</name><subName jsonType=""String"">Sedan</subName><type jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarType</class><id jsonType=""Integer"">7</id><name jsonType=""String"">Sedan</name></type></model><modelYear jsonType=""Integer"">2011</modelYear><modelid jsonType=""Integer"">23</modelid><options jsonType=""String"">Leather, Navigation</options><owners jsonType=""Integer"">2</owners><price jsonType=""Float"">12295</price><stockNumber jsonType=""String"">ASN90856</stockNumber><transmission jsonType=""String"">Auto</transmission><vin jsonType=""String"">1XCBP8AM1D5256909</vin></Object><Object jsonType=""Object"" isAnonymous=""true""><class jsonType=""String"">com.ca.lisa.demo.CarInventory</class><id jsonType=""Integer"">14</id><carTrim jsonType=""String"">Base</carTrim><color jsonType=""String"">Black</color><dealer jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarDealer</class><id jsonType=""Integer"">6</id><address jsonType=""String"">570 Lane St</address><city jsonType=""String"">Englewood</city><name jsonType=""String"">Terrys VW</name><state jsonType=""String"">CO</state><telephone jsonType=""String"">303- 560-3412</telephone><website jsonType=""String"">www.terry_vag.com</website><zip jsonType=""String"">80205</zip></dealer><engine jsonType=""String"">3.5L</engine><image1 jsonType=""String"">inventory24.jpg</image1><image2 jsonType=""String"">cars/interior24.jpg</image2><makeid jsonType=""Integer"">3</makeid><milage jsonType=""Integer"">68900</milage><model jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarModel</class><id jsonType=""Integer"">26</id><fuelType jsonType=""String"">Gas</fuelType><make jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarMake</class><id jsonType=""Integer"">3</id><name jsonType=""String"">BMW</name></make><modelYear jsonType=""Integer"">1990</modelYear><name jsonType=""String"">5-Series-S</name><subName jsonType=""String"">Sedan</subName><type jsonType=""Object""><class jsonType=""String"">com.ca.lisa.demo.CarType</class><id jsonType=""Integer"">7</id><name jsonType=""String"">Sedan</name></type></model><modelYear jsonType=""Integer"">2009</modelYear><modelid jsonType=""Integer"">26</modelid><options jsonType=""String"">Leather, Navigation</options><owners jsonType=""Integer"">1</owners><price jsonType=""Float"">35295</price><stockNumber jsonType=""String"">ASN70851</stockNumber><transmission jsonType=""String"">Auto</transmission><vin jsonType=""String"">7XCBP8AM1D5256910</vin></Object></Array>");
            _flow.HTTPActivity4.ExpectedResponseJsonBody = HTTPActivity4_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity4_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity4_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity4_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode>200</StatusCode><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity4.ExpectedOutputProperties = HTTPActivity4_ExpectedOutputProperties_Document;
            set_HTTPActivity4_checkpoints(_flow.HTTPActivity4);
            _flow.Loop7.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop7.NumberOfIterations = (int)1;
            _flow.Loop7.Comment = @"";
            _flow.Loop7.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop7.Name = @"Loop7";
            VTDPropertyInfoBase pi10 = new VTDPropertyInfoBase("XMLResponse","count(/*[local-name(.)='Array'][1]/*[local-name(.)='Object'])");
            VTDBaseGetter binding_getter6 = new VTDJsonGetter(pi10);
            VTDPropertyInfoBase pi11 = new VTDPropertyInfoBase("NumberOfIterations");
            VTDBaseSetter binding_setter5 = new VTDObjectSetter(pi11);
            bind_dir5 = new BindDirection(_flow.HTTPActivity4,binding_getter6,binding_setter5,BindTargetType.ToInProperty);
            _flow.Loop7.InDirections.Add(bind_dir5);
            _flow.Loop7.Activities.Add (_flow.Sequence9);
            _flow.Sequence9.Comment = @"";
            _flow.Sequence9.IconPath = @"";
            _flow.Sequence9.Name = @"Sequence9";
            _flow.Sequence9.Activities.Add (_flow.SetEnvironmentVariableActivity5);
            _flow.SetEnvironmentVariableActivity5.VariableKey = @"Carros";
            _flow.SetEnvironmentVariableActivity5.VariableValue = @"{Step.ResponseJsonBody.HTTPActivity4.Object[{Step.OutputProperties.Loop7.CurrentIterationNumber}]}";
            _flow.SetEnvironmentVariableActivity5.Comment = @"";
            _flow.SetEnvironmentVariableActivity5.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_setenv.png";
            _flow.SetEnvironmentVariableActivity5.Name = @"Set OS Environment Variable5";
            VTDPropertyInfoBase pi12 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter7 = new VTDObjectGetter(pi12);
            VTDPropertyInfoBase pi13 = new VTDPropertyInfoBase("XMLResponse","/*[local-name(.)='Array'][1]/*[local-name(.)='Object'][{Array0}]");
            VTDBaseGetter binding_getter8 = new VTDJsonGetter(pi13);
            binding_getter8 = new XPathGetterDecorator(binding_getter8,"{Array0}",binding_getter7,_flow.Loop7);
            VTDPropertyInfoBase pi14 = new VTDPropertyInfoBase("VariableValue");
            VTDBaseSetter binding_setter6 = new VTDObjectSetter(pi14);
            binding_setter6 = new StringFormaterDecorator(binding_setter6,"{Step.ResponseJsonBody.HTTPActivity4.Object[{Step.OutputProperties.Loop7.CurrentIterationNumber}]}");
            binding_setter6 = new VTDXMLToStringDecorator(binding_setter6);
            bind_dir6 = new BindDirection(_flow.HTTPActivity4,binding_getter8,binding_setter6,BindTargetType.ToInProperty);
            _flow.SetEnvironmentVariableActivity5.InDirections.Add(bind_dir6);
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(), "bin", "ReportResources");
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    