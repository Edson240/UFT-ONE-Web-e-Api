/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘PostRegister.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir50 = null;
        public BindDirection bind_dir51 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity12 = null;
        public BindDirection bind_dir52 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity12_Policy = null;
        public BindDirection bind_dir53 = null;
        public BindDirection bind_dir54 = null;
        public BindDirection bind_dir55 = null;
        public BindDirection bind_dir56 = null;
        public BindDirection bind_dir57 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity8 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity8");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.ForEach);
            _flow.DataExporterActivity10 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity10");
            _flow.DataExporterCloseActivity11 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity11");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity9 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity9");
            this.DataCursorActivity12 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity12");
            this.DataCursorActivity12_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence7 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence7");
            _flow.ConcatenateStringsActivity5 = new HP.ST.Ext.BasicActivities.ConcatenateStringsActivity(_context,"ConcatenateStringsActivity5");
            _flow.HTTPActivity4 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity4");
            _flow.SetEnvironmentVariableActivity6 = new HP.ST.Ext.BasicActivities.SetEnvironmentVariableActivity(_context,"SetEnvironmentVariableActivity6");
            _flow.DataFetchActivity8.Comment = @"";
            _flow.DataFetchActivity8.IconPath = @"";
            _flow.DataFetchActivity8.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity8.QueryClassName = @"HP.ST.Ext.CustomDataProviders.LocalDataQuery";
            XmlDocument DataFetchActivity8_QueryParameters_Document = new XmlDocument();
            DataFetchActivity8_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity8Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>1a8b4ca2-a8e9-4911-a1fb-e86c1011d4e0</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>register</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>TableStructure</Name><Value>firstname,String,|lastname,String,|username,String,|password,String,</Value></QueryParameter><QueryParameter><Name>TableContents</Name><Value>Edson|Neto|edson26|1234^Edson|Neto|edson27|1234</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity8_QueryParameters_Document.LoadXml(xmlDataFetchActivity8Params);
            _flow.DataFetchActivity8.QueryParameters = DataFetchActivity8_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("register", _flow.DataFetchActivity8);
            this.Activities.Add (_flow.DataFetchActivity8);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"Start";
            _flow.StartActivity1.JVM = new HP.ST.Ext.BasicActivities.JVMProperties();
            _flow.StartActivity1.IsJavaUsed = false;
            _flow.StartActivity1.JVM.Classpath = @"%CLASSPATH%";
            _flow.StartActivity1.JVM.AdditionalVMParameters = @"";
            _flow.StartActivity1.JMS = new HP.ST.Ext.BasicActivities.JMSProperties();
            _flow.StartActivity1.IsJmsUsed = false;
            _flow.StartActivity1.JMS.JNDIContextFactory = @"<Select...>";
            _flow.StartActivity1.JMS.JNDIProviderUrl = @"";
            _flow.StartActivity1.JMS.JMSConnectionFactory = @"";
            _flow.StartActivity1.JMS.SecurityPrincipal = @"";
            _flow.StartActivity1.JMS.SecurityCredentials = @"";
            _flow.StartActivity1.JMS.JMSClientID = @"";
            _flow.StartActivity1.JMS.SSLPassword = @"";
            _flow.StartActivity1.JMS.SSLTrustedCertificate = @"";
            _flow.StartActivity1.JMS.SSLIdentity = @"";
            _flow.StartActivity1.JMS.ConnectionsPerProcess = @"1";
            _flow.StartActivity1.JMS.TimeoutOptions = @"DN_User_defined_Timeout";
            _flow.StartActivity1.JMS.UserTimeout = @"20";
            _flow.StartActivity1.JMS.GenerateAutoSelector = @"No";
            _flow.StartActivity1.KafkaSSL = new HP.ST.Fwk.KafkaFWK.KafkaSSLProperties();
            _flow.StartActivity1.IsKafkaUsed = false;
            _flow.StartActivity1.KafkaSSL.StrEnableSSL = @"No";
            _flow.StartActivity1.KafkaSSL.SSLCALocation = @"";
            _flow.StartActivity1.KafkaSSL.SSLClientCertificateLocation = @"";
            _flow.StartActivity1.KafkaSSL.SSLClientKeyLocation = @"";
            _flow.StartActivity1.KafkaSASL = new HP.ST.Fwk.KafkaFWK.KafkaSASLProperties();
            _flow.StartActivity1.KafkaSASL.StrEnableSASL = @"No";
            _flow.StartActivity1.KafkaSASL.StrMechanism = @"GSSAPI";
            _flow.StartActivity1.KafkaSASL.StrServiceName = @"";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"For each item in {DataSource.register}";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Condition += delegate(object sender,STActivityBaseEventArgs e)
            {
            return !DataCursorActivity12.IsAtEndPosition;
            };
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"Test Flow";
            _flow.Loop2.Activities.Add (this.DataCursorActivity12);
            _flow.Loop2.Activities.Add (_flow.Sequence7);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity10.Comment = @"";
            _flow.DataExporterActivity10.IconPath = @"";
            VTDPropertyInfoBase pi99 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter50 = new VTDObjectGetter(pi99);
            VTDPropertyInfoBase pi100 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter50 = new VTDObjectSetter(pi100);
            binding_setter50 = new StringFormaterDecorator(binding_setter50,"{Step.DataFetchActivity8.OutTable}");
            bind_dir50 = new BindDirection(_flow.DataFetchActivity8,binding_getter50,binding_setter50,BindTargetType.ToInProperty);
            _flow.DataExporterActivity10.InDirections.Add(bind_dir50);
            this.Activities.Add (_flow.DataExporterActivity10);
            _flow.DataExporterCloseActivity11.Comment = @"";
            _flow.DataExporterCloseActivity11.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity11);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"End";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity9.Comment = @"";
            _flow.DataDisconnectActivity9.IconPath = @"";
            VTDPropertyInfoBase pi101 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter51 = new VTDObjectGetter(pi101);
            VTDPropertyInfoBase pi102 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter51 = new VTDObjectSetter(pi102);
            binding_setter51 = new StringFormaterDecorator(binding_setter51,"{Step.DataFetchActivity8.OutTable}");
            bind_dir51 = new BindDirection(_flow.DataFetchActivity8,binding_getter51,binding_setter51,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity9.InDirections.Add(bind_dir51);
            this.Activities.Add (_flow.DataDisconnectActivity9);
            this.DataCursorActivity12.Comment = @"";
            this.DataCursorActivity12.IconPath = @"";
            VTDPropertyInfoBase pi103 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter52 = new VTDObjectGetter(pi103);
            VTDPropertyInfoBase pi104 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter52 = new VTDObjectSetter(pi104);
            binding_setter52 = new StringFormaterDecorator(binding_setter52,"{Step.DataFetchActivity8.OutTable}");
            bind_dir52 = new BindDirection(_flow.DataFetchActivity8,binding_getter52,binding_setter52,BindTargetType.ToInProperty);
            this.DataCursorActivity12.InDirections.Add(bind_dir52);
            this.DataCursorActivity12_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity12_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity12_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity12_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity12_Policy.StartCondition.Value = "";
            this.DataCursorActivity12_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity12_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity12_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity12_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity12_Policy.EndCondition.Value = "";
            this.DataCursorActivity12_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity12_Policy.StepSize = 1;
            this.DataCursorActivity12_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity12.Policy = this.DataCursorActivity12_Policy;
            this.DataCursorActivity12.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity12.ResetCursor;
            _flow.Sequence7.Comment = @"";
            _flow.Sequence7.IconPath = @"";
            _flow.Sequence7.Name = @"Sequence7";
            _flow.Sequence7.Activities.Add (_flow.ConcatenateStringsActivity5);
            _flow.Sequence7.Activities.Add (_flow.HTTPActivity4);
            _flow.Sequence7.Activities.Add (_flow.SetEnvironmentVariableActivity6);
            _flow.ConcatenateStringsActivity5.Prefix = @"http://localhost:3434/cars-app/register";
            _flow.ConcatenateStringsActivity5.Suffix = @"/firstname";
            _flow.ConcatenateStringsActivity5.Comment = @"";
            _flow.ConcatenateStringsActivity5.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_concat.png";
            _flow.ConcatenateStringsActivity5.Name = @"Concatenate Strings5";
            _flow.HTTPActivity4.TextBody = @"";
            _flow.HTTPActivity4.TextXmlBody = @"";
            _flow.HTTPActivity4.FileBody = @"";
            _flow.HTTPActivity4.PostBody = @"";
            _flow.HTTPActivity4.Url = @"http://localhost:3434/cars-app/register";
            _flow.HTTPActivity4.HttpMethod = @"POST";
            _flow.HTTPActivity4.HttpVersion = @"1.1";
            _flow.HTTPActivity4.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity4.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity4.RequestHeaders[0].Key = @"Content-Type";
            _flow.HTTPActivity4.RequestHeaders[0].Value = @"application/json";
            _flow.HTTPActivity4.Comment = @"";
            _flow.HTTPActivity4.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity4.RequestBodyType = @"Json";
            _flow.HTTPActivity4.ResponseType = @"Json";
            _flow.HTTPActivity4.Name = @"HTTP Request4";
            _flow.HTTPActivity4.Proxy.Server = @"";
            _flow.HTTPActivity4.Proxy.Username = @"";
            _flow.HTTPActivity4.Proxy.Password = @"";
            _flow.HTTPActivity4.Authentication.Username = @"";
            _flow.HTTPActivity4.Authentication.Password = @"";
            _flow.HTTPActivity4.Authentication.PreemptiveAuthentication = false;
            _flow.HTTPActivity4.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity4.Timeout = (int)100000;
            _flow.HTTPActivity4.ClientCertificate.Password = @"";
            _flow.HTTPActivity4.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity4.UseClientCertificate = false;
            _flow.HTTPActivity4.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity4.AllowRedirections = true;
            _flow.HTTPActivity4.ReuseCookies = false;
            _flow.HTTPActivity4.ExpectServerError = false;
            _flow.HTTPActivity4.HanaRequest = false;
            XmlDocument HTTPActivity4_XMLBody_Document = new XmlDocument();
            HTTPActivity4_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity4_XMLBody_Document.LoadXml(
@"<Object jsonType=""Object"" isAnonymous=""true""><firstname jsonType=""String"">{DataSource.register.firstname}</firstname><lastname jsonType=""String"">{DataSource.register.lastname}</lastname><username jsonType=""String"">{DataSource.register.username}</username><password jsonType=""String"">{DataSource.register.password}</password></Object>");
            _flow.HTTPActivity4.XMLBody = HTTPActivity4_XMLBody_Document;
            XmlDocument HTTPActivity4_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity4_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity4_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity4.RequestMultipartInfoXml = HTTPActivity4_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity4.Multipart=false;
            VTDPropertyInfoBase pi105 = new VTDPropertyInfoBase("username");
            VTDBaseGetter binding_getter53 = new VTDObjectGetter(pi105);
            VTDPropertyInfoBase pi106 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='username'][1]");
            VTDBaseSetter binding_setter53 = new VTDJsonSetter(pi106,XmlTypeCode.String);
            binding_setter53 = new StringFormaterDecorator(binding_setter53,"{DataSource.register.username}");
            bind_dir53 = new BindDirection(this.DataCursorActivity12,binding_getter53,binding_setter53,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir53);
            VTDPropertyInfoBase pi107 = new VTDPropertyInfoBase("password");
            VTDBaseGetter binding_getter54 = new VTDObjectGetter(pi107);
            VTDPropertyInfoBase pi108 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='password'][1]");
            VTDBaseSetter binding_setter54 = new VTDJsonSetter(pi108,XmlTypeCode.String);
            binding_setter54 = new StringFormaterDecorator(binding_setter54,"{DataSource.register.password}");
            bind_dir54 = new BindDirection(this.DataCursorActivity12,binding_getter54,binding_setter54,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir54);
            VTDPropertyInfoBase pi109 = new VTDPropertyInfoBase("lastname");
            VTDBaseGetter binding_getter55 = new VTDObjectGetter(pi109);
            VTDPropertyInfoBase pi110 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='lastname'][1]");
            VTDBaseSetter binding_setter55 = new VTDJsonSetter(pi110,XmlTypeCode.String);
            binding_setter55 = new StringFormaterDecorator(binding_setter55,"{DataSource.register.lastname}");
            bind_dir55 = new BindDirection(this.DataCursorActivity12,binding_getter55,binding_setter55,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir55);
            VTDPropertyInfoBase pi111 = new VTDPropertyInfoBase("firstname");
            VTDBaseGetter binding_getter56 = new VTDObjectGetter(pi111);
            VTDPropertyInfoBase pi112 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='firstname'][1]");
            VTDBaseSetter binding_setter56 = new VTDJsonSetter(pi112,XmlTypeCode.String);
            binding_setter56 = new StringFormaterDecorator(binding_setter56,"{DataSource.register.firstname}");
            bind_dir56 = new BindDirection(this.DataCursorActivity12,binding_getter56,binding_setter56,BindTargetType.ToInProperty);
            _flow.HTTPActivity4.InDirections.Add(bind_dir56);
            XmlDocument HTTPActivity4_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity4_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity4_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity4.ExpectedResponseXmlBody = HTTPActivity4_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity4_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity4_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity4_ExpectedResponseJsonBody_Document.LoadXml(
@"<Array jsonType=""Array"" isAnonymous=""true""><Value jsonType=""String"" isAnonymous=""true"">status: success</Value></Array>");
            _flow.HTTPActivity4.ExpectedResponseJsonBody = HTTPActivity4_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity4_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity4_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity4_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode>200</StatusCode><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity4.ExpectedOutputProperties = HTTPActivity4_ExpectedOutputProperties_Document;
            set_HTTPActivity4_checkpoints(_flow.HTTPActivity4);
            _flow.SetEnvironmentVariableActivity6.VariableKey = @"postRegister";
            _flow.SetEnvironmentVariableActivity6.VariableValue = @"{Step.ResponseJsonBody.HTTPActivity4.Value}";
            _flow.SetEnvironmentVariableActivity6.Comment = @"";
            _flow.SetEnvironmentVariableActivity6.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_setenv.png";
            _flow.SetEnvironmentVariableActivity6.Name = @"Set OS Environment Variable6";
            VTDPropertyInfoBase pi113 = new VTDPropertyInfoBase("XMLResponse","/*[local-name(.)='Array'][1]/*[local-name(.)='Value'][1]");
            VTDBaseGetter binding_getter57 = new VTDJsonGetter(pi113);
            VTDPropertyInfoBase pi114 = new VTDPropertyInfoBase("VariableValue");
            VTDBaseSetter binding_setter57 = new VTDObjectSetter(pi114);
            binding_setter57 = new StringFormaterDecorator(binding_setter57,"{Step.ResponseJsonBody.HTTPActivity4.Value}");
            bind_dir57 = new BindDirection(_flow.HTTPActivity4,binding_getter57,binding_setter57,BindTargetType.ToInProperty);
            _flow.SetEnvironmentVariableActivity6.InDirections.Add(bind_dir57);
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(), "bin", "ReportResources");
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    