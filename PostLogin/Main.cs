/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘PostLogin.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir19 = null;
        public BindDirection bind_dir20 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity15 = null;
        public BindDirection bind_dir21 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity15_Policy = null;
        public BindDirection bind_dir22 = null;
        public BindDirection bind_dir23 = null;
        public BindDirection bind_dir24 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity11 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity11");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.ForEach);
            _flow.DataExporterActivity13 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity13");
            _flow.DataExporterCloseActivity14 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity14");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity12 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity12");
            this.DataCursorActivity15 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity15");
            this.DataCursorActivity15_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence10 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence10");
            _flow.ConcatenateStringsActivity4 = new HP.ST.Ext.BasicActivities.ConcatenateStringsActivity(_context,"ConcatenateStringsActivity4");
            _flow.HTTPActivity5 = new HP.ST.Ext.HTTPActivity.HTTPActivity(_context,"HTTPActivity5");
            _flow.SetEnvironmentVariableActivity6 = new HP.ST.Ext.BasicActivities.SetEnvironmentVariableActivity(_context,"SetEnvironmentVariableActivity6");
            _flow.DataFetchActivity11.Comment = @"";
            _flow.DataFetchActivity11.IconPath = @"";
            _flow.DataFetchActivity11.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity11.QueryClassName = @"HP.ST.Ext.CustomDataProviders.LocalDataQuery";
            XmlDocument DataFetchActivity11_QueryParameters_Document = new XmlDocument();
            DataFetchActivity11_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity11Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>e6898e3d-bdff-400d-8d33-5d41654903ed</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>api</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>TableStructure</Name><Value>username,String,|password,String,</Value></QueryParameter><QueryParameter><Name>TableContents</Name><Value>edson22|1234^edson23|1234</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity11_QueryParameters_Document.LoadXml(xmlDataFetchActivity11Params);
            _flow.DataFetchActivity11.QueryParameters = DataFetchActivity11_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("api", _flow.DataFetchActivity11);
            this.Activities.Add (_flow.DataFetchActivity11);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"Start";
            _flow.StartActivity1.JVM = new HP.ST.Ext.BasicActivities.JVMProperties();
            _flow.StartActivity1.IsJavaUsed = false;
            _flow.StartActivity1.JVM.Classpath = @"%CLASSPATH%";
            _flow.StartActivity1.JVM.AdditionalVMParameters = @"";
            _flow.StartActivity1.JMS = new HP.ST.Ext.BasicActivities.JMSProperties();
            _flow.StartActivity1.IsJmsUsed = false;
            _flow.StartActivity1.JMS.JNDIContextFactory = @"<Select...>";
            _flow.StartActivity1.JMS.JNDIProviderUrl = @"";
            _flow.StartActivity1.JMS.JMSConnectionFactory = @"";
            _flow.StartActivity1.JMS.SecurityPrincipal = @"";
            _flow.StartActivity1.JMS.SecurityCredentials = @"";
            _flow.StartActivity1.JMS.JMSClientID = @"";
            _flow.StartActivity1.JMS.SSLPassword = @"";
            _flow.StartActivity1.JMS.SSLTrustedCertificate = @"";
            _flow.StartActivity1.JMS.SSLIdentity = @"";
            _flow.StartActivity1.JMS.ConnectionsPerProcess = @"1";
            _flow.StartActivity1.JMS.TimeoutOptions = @"DN_User_defined_Timeout";
            _flow.StartActivity1.JMS.UserTimeout = @"20";
            _flow.StartActivity1.JMS.GenerateAutoSelector = @"No";
            _flow.StartActivity1.KafkaSSL = new HP.ST.Fwk.KafkaFWK.KafkaSSLProperties();
            _flow.StartActivity1.IsKafkaUsed = false;
            _flow.StartActivity1.KafkaSSL.StrEnableSSL = @"No";
            _flow.StartActivity1.KafkaSSL.SSLCALocation = @"";
            _flow.StartActivity1.KafkaSSL.SSLClientCertificateLocation = @"";
            _flow.StartActivity1.KafkaSSL.SSLClientKeyLocation = @"";
            _flow.StartActivity1.KafkaSASL = new HP.ST.Fwk.KafkaFWK.KafkaSASLProperties();
            _flow.StartActivity1.KafkaSASL.StrEnableSASL = @"No";
            _flow.StartActivity1.KafkaSASL.StrMechanism = @"GSSAPI";
            _flow.StartActivity1.KafkaSASL.StrServiceName = @"";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"For each item in {DataSource.api}";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Condition += delegate(object sender,STActivityBaseEventArgs e)
            {
            return !DataCursorActivity15.IsAtEndPosition;
            };
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"Test Flow";
            _flow.Loop2.Activities.Add (this.DataCursorActivity15);
            _flow.Loop2.Activities.Add (_flow.Sequence10);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity13.Comment = @"";
            _flow.DataExporterActivity13.IconPath = @"";
            VTDPropertyInfoBase pi37 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter19 = new VTDObjectGetter(pi37);
            VTDPropertyInfoBase pi38 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter19 = new VTDObjectSetter(pi38);
            binding_setter19 = new StringFormaterDecorator(binding_setter19,"{Step.DataFetchActivity11.OutTable}");
            bind_dir19 = new BindDirection(_flow.DataFetchActivity11,binding_getter19,binding_setter19,BindTargetType.ToInProperty);
            _flow.DataExporterActivity13.InDirections.Add(bind_dir19);
            this.Activities.Add (_flow.DataExporterActivity13);
            _flow.DataExporterCloseActivity14.Comment = @"";
            _flow.DataExporterCloseActivity14.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity14);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"End";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity12.Comment = @"";
            _flow.DataDisconnectActivity12.IconPath = @"";
            VTDPropertyInfoBase pi39 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter20 = new VTDObjectGetter(pi39);
            VTDPropertyInfoBase pi40 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter20 = new VTDObjectSetter(pi40);
            binding_setter20 = new StringFormaterDecorator(binding_setter20,"{Step.DataFetchActivity11.OutTable}");
            bind_dir20 = new BindDirection(_flow.DataFetchActivity11,binding_getter20,binding_setter20,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity12.InDirections.Add(bind_dir20);
            this.Activities.Add (_flow.DataDisconnectActivity12);
            this.DataCursorActivity15.Comment = @"";
            this.DataCursorActivity15.IconPath = @"";
            VTDPropertyInfoBase pi41 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter21 = new VTDObjectGetter(pi41);
            VTDPropertyInfoBase pi42 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter21 = new VTDObjectSetter(pi42);
            binding_setter21 = new StringFormaterDecorator(binding_setter21,"{Step.DataFetchActivity11.OutTable}");
            bind_dir21 = new BindDirection(_flow.DataFetchActivity11,binding_getter21,binding_setter21,BindTargetType.ToInProperty);
            this.DataCursorActivity15.InDirections.Add(bind_dir21);
            this.DataCursorActivity15_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity15_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity15_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity15_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity15_Policy.StartCondition.Value = "";
            this.DataCursorActivity15_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity15_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity15_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity15_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity15_Policy.EndCondition.Value = "";
            this.DataCursorActivity15_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity15_Policy.StepSize = 1;
            this.DataCursorActivity15_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity15.Policy = this.DataCursorActivity15_Policy;
            this.DataCursorActivity15.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity15.ResetCursor;
            _flow.Sequence10.Comment = @"";
            _flow.Sequence10.IconPath = @"";
            _flow.Sequence10.Name = @"Sequence10";
            _flow.Sequence10.Activities.Add (_flow.ConcatenateStringsActivity4);
            _flow.Sequence10.Activities.Add (_flow.HTTPActivity5);
            _flow.Sequence10.Activities.Add (_flow.SetEnvironmentVariableActivity6);
            _flow.ConcatenateStringsActivity4.Prefix = @"http://localhost:3434/cars-app/api/login";
            _flow.ConcatenateStringsActivity4.Suffix = @"";
            _flow.ConcatenateStringsActivity4.Comment = @"";
            _flow.ConcatenateStringsActivity4.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_concat.png";
            _flow.ConcatenateStringsActivity4.Name = @"Concatenate Strings4";
            _flow.HTTPActivity5.TextBody = @" {" + Environment.NewLine + @"  ""username"": ""edson01""," + Environment.NewLine + @"  ""password"": ""1234""" + Environment.NewLine + @"}";
            _flow.HTTPActivity5.TextXmlBody = @"";
            _flow.HTTPActivity5.FileBody = @"";
            _flow.HTTPActivity5.PostBody = @"";
            _flow.HTTPActivity5.Url = @"http://localhost:3434/cars-app/api/login";
            _flow.HTTPActivity5.HttpMethod = @"POST";
            _flow.HTTPActivity5.HttpVersion = @"1.1";
            _flow.HTTPActivity5.RequestHeaders = new Pair<string, string>[1];
            _flow.HTTPActivity5.RequestHeaders[0] = new Pair<string, string>();
            _flow.HTTPActivity5.RequestHeaders[0].Key = @"Content-Type";
            _flow.HTTPActivity5.RequestHeaders[0].Value = @"application/json";
            _flow.HTTPActivity5.Comment = @"";
            _flow.HTTPActivity5.IconPath = @"AddIns\ServiceTest\HTTPActivity\toolbox_http.png";
            _flow.HTTPActivity5.RequestBodyType = @"Json";
            _flow.HTTPActivity5.ResponseType = @"Json";
            _flow.HTTPActivity5.Name = @"HTTP Request5";
            _flow.HTTPActivity5.Proxy.Server = @"";
            _flow.HTTPActivity5.Proxy.Username = @"";
            _flow.HTTPActivity5.Proxy.Password = @"";
            _flow.HTTPActivity5.Authentication.Username = @"";
            _flow.HTTPActivity5.Authentication.Password = @"";
            _flow.HTTPActivity5.Authentication.PreemptiveAuthentication = false;
            _flow.HTTPActivity5.ConnectionType = @"Keep-Alive";
            _flow.HTTPActivity5.Timeout = (int)100000;
            _flow.HTTPActivity5.ClientCertificate.Password = @"";
            _flow.HTTPActivity5.ClientCertificate.FileSystem.Path = @"";
            _flow.HTTPActivity5.UseClientCertificate = false;
            _flow.HTTPActivity5.MaximumAutomaticRedirections = (int)3;
            _flow.HTTPActivity5.AllowRedirections = true;
            _flow.HTTPActivity5.ReuseCookies = false;
            _flow.HTTPActivity5.ExpectServerError = false;
            _flow.HTTPActivity5.HanaRequest = false;
            XmlDocument HTTPActivity5_XMLBody_Document = new XmlDocument();
            HTTPActivity5_XMLBody_Document.PreserveWhitespace = true;
            HTTPActivity5_XMLBody_Document.LoadXml(
@"<Object jsonType=""Object"" isAnonymous=""true""><username jsonType=""String"">{DataSource.api.username}</username><password jsonType=""String"">{DataSource.api.password}</password></Object>");
            _flow.HTTPActivity5.XMLBody = HTTPActivity5_XMLBody_Document;
            XmlDocument HTTPActivity5_RequestMultipartInfoXml_Document = new XmlDocument();
            HTTPActivity5_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            HTTPActivity5_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.HTTPActivity5.RequestMultipartInfoXml = HTTPActivity5_RequestMultipartInfoXml_Document;
            _flow.HTTPActivity5.Multipart=false;
            VTDPropertyInfoBase pi43 = new VTDPropertyInfoBase("username");
            VTDBaseGetter binding_getter22 = new VTDObjectGetter(pi43);
            VTDPropertyInfoBase pi44 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='username'][1]");
            VTDBaseSetter binding_setter22 = new VTDJsonSetter(pi44,XmlTypeCode.String);
            binding_setter22 = new StringFormaterDecorator(binding_setter22,"{DataSource.api.username}");
            bind_dir22 = new BindDirection(this.DataCursorActivity15,binding_getter22,binding_setter22,BindTargetType.ToInProperty);
            _flow.HTTPActivity5.InDirections.Add(bind_dir22);
            VTDPropertyInfoBase pi45 = new VTDPropertyInfoBase("password");
            VTDBaseGetter binding_getter23 = new VTDObjectGetter(pi45);
            VTDPropertyInfoBase pi46 = new VTDPropertyInfoBase("XMLBody","/*[local-name(.)='Object'][1]/*[local-name(.)='password'][1]");
            VTDBaseSetter binding_setter23 = new VTDJsonSetter(pi46,XmlTypeCode.String);
            binding_setter23 = new StringFormaterDecorator(binding_setter23,"{DataSource.api.password}");
            bind_dir23 = new BindDirection(this.DataCursorActivity15,binding_getter23,binding_setter23,BindTargetType.ToInProperty);
            _flow.HTTPActivity5.InDirections.Add(bind_dir23);
            XmlDocument HTTPActivity5_ExpectedResponseXmlBody_Document = new XmlDocument();
            HTTPActivity5_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            HTTPActivity5_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.HTTPActivity5.ExpectedResponseXmlBody = HTTPActivity5_ExpectedResponseXmlBody_Document;
            XmlDocument HTTPActivity5_ExpectedResponseJsonBody_Document = new XmlDocument();
            HTTPActivity5_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            HTTPActivity5_ExpectedResponseJsonBody_Document.LoadXml(
@"<Object jsonType=""Object"" isAnonymous=""true""><firstname jsonType=""String"">Emprestimo</firstname><lastname jsonType=""String"">Neto</lastname><username jsonType=""String"">edson01</username><token_type jsonType=""String"">Bearer</token_type><access_token jsonType=""String"">eyJhbGciOiJIUzI1NiJ9.eyJwcmluY2lwYWwiOiJINHNJQUFBQUFBQUFBSlZTUDBcL2JRQlJcL2RvTkNoZFFDRWtnTXNCUzJ5bWxoekFRb0lGVVdWS1JaUUdwMXNSXC9tNEh4bjdzNlFMRlVtR0JoQVwvSkVxOVN2d1RkcWxINkFxUTFkbTFyNHpBYWRkVUcreTNcLzM4K1wvZDhmUXREUnNOQ29oa1hKc2hFbm5BWm1FeHptUmlNY3MxdE44Z042aGh0Z1ZndGdDMmF3UDN4ZlBCQzhIbHNZVHpjWlFlc0pwaE1hdXZ0WFl4c3ZhTmhYdW1rejdpdFdZcUhTdThGajl5UjB2aVhRRW50bmZsUTNZUXhGa1VxbDNaTnlVWW40eHJqVFJndFo2R0s5dHhvSXFJYmxKWXpZUWFoVlpTc0xUQU9ZWVRsZGtlUktrZGo0ZVc5MmR4eVVXdWlyWWN3bkRGanlOMFwvU1pyV1dYZjN6cWFrQlB2d0dTcWR6S05EM2MwNWFPQjRnbVVsQktYbVNwclpsa3hWekxlNUV5ZiszdlQ1ajlPdnZaWVBRSjI4ZnZxYmNqNjFCTDF2SCs5bWlxSzl5TUxrZ1BVU1Z1OWs1R2FzWlA2ZzBTblwvXC9QTCs0dXIyZU9zWktUdkV5dlwvdlkzYXgzMXgzV2FVWjA4eXFnUjBSN1dIRlBSUDUwdFBrRDF2b0JrMmVaZ0xwajVJVzQwZUprcGppVnJRU0QzMWJlTDZ4SGpZK3RacU5EZmRXeGRnbytlWXR5YjRvVXJ0MUJhR2laWjM4UHZ0Kyt1b1hVYnlEb1FNbWNxVFNSMHZRV3A2MlVSOWRYMDJQWE42Y0ZCSDZ2N1BcL0I0Z2d1bklTQXdBQSIsInN1YiI6ImVkc29uMDEiLCJyb2xlcyI6WyJST0xFX1VTRVIiXSwiZXhwIjoxNzAyOTEwMzk3LCJpYXQiOjE3MDI5MDY3OTd9.eFyU3DcWlivr0S8SBHkDBu8PLMtWX5sIednJpxAGY0Q</access_token><roles jsonType=""Array""><Value jsonType=""String"" isAnonymous=""true"">ROLE_USER</Value></roles></Object>");
            _flow.HTTPActivity5.ExpectedResponseJsonBody = HTTPActivity5_ExpectedResponseJsonBody_Document;
            XmlDocument HTTPActivity5_ExpectedOutputProperties_Document = new XmlDocument();
            HTTPActivity5_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            HTTPActivity5_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion /><StatusCode>200</StatusCode><StatusDescription /><ResponseBody /><ResponseBodyAsBase64 /></Arguments>");
            _flow.HTTPActivity5.ExpectedOutputProperties = HTTPActivity5_ExpectedOutputProperties_Document;
            set_HTTPActivity5_checkpoints(_flow.HTTPActivity5);
            _flow.SetEnvironmentVariableActivity6.VariableKey = @"login";
            _flow.SetEnvironmentVariableActivity6.VariableValue = @"{Step.ResponseJsonBody.HTTPActivity5.access_token}";
            _flow.SetEnvironmentVariableActivity6.Comment = @"";
            _flow.SetEnvironmentVariableActivity6.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_setenv.png";
            _flow.SetEnvironmentVariableActivity6.Name = @"Set OS Environment Variable6";
            VTDPropertyInfoBase pi47 = new VTDPropertyInfoBase("XMLResponse","/*[local-name(.)='Object'][1]/*[local-name(.)='access_token'][1]");
            VTDBaseGetter binding_getter24 = new VTDJsonGetter(pi47);
            VTDPropertyInfoBase pi48 = new VTDPropertyInfoBase("VariableValue");
            VTDBaseSetter binding_setter24 = new VTDObjectSetter(pi48);
            binding_setter24 = new StringFormaterDecorator(binding_setter24,"{Step.ResponseJsonBody.HTTPActivity5.access_token}");
            bind_dir24 = new BindDirection(_flow.HTTPActivity5,binding_getter24,binding_setter24,BindTargetType.ToInProperty);
            _flow.SetEnvironmentVariableActivity6.InDirections.Add(bind_dir24);
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(), "bin", "ReportResources");
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    